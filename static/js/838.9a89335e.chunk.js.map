{"version":3,"file":"static/js/838.9a89335e.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Main/Main.styled.jsx","constance/constance.js","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","components/MoviesPageTemplate/MoviesPageTemplate.styled.jsx","components/MoviesPageTemplate/MoviesPageTemplate.jsx","pages/MoviesPage/MoviesPage.jsx","services/themoviedbApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SpinnerContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\n","import { BounceLoader } from \"react-spinners\";\nimport { SpinnerContainer } from \"./Loader.styled\";\n\nexport const Spinner = () => {\n    return <SpinnerContainer>\n        <BounceLoader color=\"#ec711f\"/>\n    </SpinnerContainer>\n}","import styled from 'styled-components';\n\n\nexport const Main = styled.main`\n  \n  min-height: 100vh;\n  background: linear-gradient(#4e0d0d, #b32626);\n`;","export const SEARCH_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nexport const API_KEY = 'acf3cca943ac5337a13eedff98e533f5';\nexport const POPULAR_FILM_FETCH = '/trending/movie/day';\nexport const SEARCH__MOVIE = '/search/movie';\nexport const FILM = '/movie';\nexport const FILM_CAST = '/credits';\nexport const FILM_REVIEWS = '/reviews';\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n    padding-top: 30px;\n    padding-bottom: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const Input = styled.input`\n    width: 150px;\n    height: 35px;\n    border-radius: 10px;\n    padding-left: 5px;\n    border: none;\n    outline: none;\n    color: #313131;\n    font-size: 16px;\n    font-family: cursive;\n    margin-right: 5px;\n\n    :focus-visible {\n        border: solid 2px #e9691f;\n    }\n\n    @media screen and (min-width: 768px) {\n        width: 260px;\n    }\n\n    @media screen and (min-width: 1440px) {\n        width: 300px;\n        height: 50px;\n        font-size: 20px;\n    }\n`;\n\nexport const SearchBtn = styled.button`\n    width: 72px;\n    height: 35px;\n    border: none;\n    border-radius: 10px;\n    font-size: 16px;\n    font-family: cursive;\n    color: #fff;\n    cursor: pointer;\n    background: #e9691f;\n    transition: background 250ms ease;\n\n    :hover,\n    :focus {\n        background: #f85c01;\n    }\n\n    @media screen and (min-width: 1440px) {\n        width: 100px;\n        height: 50px;\n        font-size: 20px;\n    }\n`;","import { useState } from \"react\";\nimport { Form, Input, SearchBtn } from \"./SearchForm.styled\";\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ onSubmit }) => {\n    const [searchValue, setSearchValue] = useState('');\n    \n    const handleChange = event => {\n        setSearchValue(event.currentTarget.value)\n    }\n    \n    const handleSubmit = event => {\n        event.preventDefault();\n        const normalizedSearchValue = searchValue.toLowerCase().trim();\n        onSubmit(normalizedSearchValue);\n        setSearchValue('');\n    }\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Input type=\"text\" placeholder=\"Movies name\" value={searchValue} onChange={handleChange}/>\n            <SearchBtn type=\"submit\">Search</SearchBtn>\n        </Form>\n    )\n}\n\nSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  text-align: center;\n  padding-bottom: 60px;\n`;\n\nexport const FilmList = styled.ul`\n    margin-top: 20px;\n    display: flex;\n    align-items: center;\n    @media screen and (max-width: 767px){\n        flex-direction: column;\n    }\n\n    @media screen and (min-width: 768px){\n        flex-wrap: wrap;\n        justify-content: center;\n        margin-top: -30px;\n        margin-left: -30px;\n    }\n`;\n\nexport const FilmItem = styled.li`\n    max-width: 240px;\n    height: 360px;\n    border-radius: 10px;\n    overflow: overlay;\n    background-color: #ec711f;\n    transform: scale(1);\n    transition: transform 250ms ease;\n\n    :hover,\n    :focus {\n        transform: scale(1.1);\n    }\n\n    @media screen and (max-width: 767px){\n        :not(:last-child){\n            margin-bottom: 30px;\n        }\n    }\n    \n    @media screen and (min-width: 768px){\n        flex-basis: calc((100% - 60px) / 2);\n        margin-top: 30px;\n        margin-left: 30px;\n    }\n\n    @media screen and (min-width: 1024px){\n        flex-basis: calc((100% - 90px) / 3);\n        margin-top: 30px;\n        margin-left: 30px;\n    }\n\n    @media screen and (min-width: 1440px){\n        flex-basis: calc((100% - 120px) / 4);\n        margin-top: 30px;\n        margin-left: 30px;\n    }\n`;\n\nexport const FilmItemImg = styled.img`\n    width: 290px;\n    height: 320px;\n    object-fit: fill;\n`;\n\nexport const DefaultImg = styled.img`\n    width: 290px;\n    height: 320px;\n    object-fit: fill;\n`;\n\nexport const FilmItemTitle = styled.h3`\n    padding: 5px;\n    font-family: Georgia, 'Times New Roman', Times, serif;\n    font-weight: 400;\n    line-height: 133%;\n\n    color: #fff;\n`;\n","import { Link, useLocation } from \"react-router-dom\";\nimport { SEARCH_IMG_URL } from \"constance\";\nimport DefaultPoster from \"../../images/PosterNotAvailable.jpg\";\nimport { Section, FilmList, FilmItem, FilmItemImg, DefaultImg, FilmItemTitle } from \"./MoviesPageTemplate.styled\";\nimport { Wrapper } from \"components/Wrapper/Wrapper.styled\";\nimport PropTypes from 'prop-types';\n\nexport const MoviesPageTemplate = ({ films })=> {\n   const location = useLocation();\n       return (\n         <Section>\n            <Wrapper>\n               <FilmList>\n                  {\n                     films.map(({ id, title, poster_path, release_date }) => (\n                        <FilmItem key={id}>\n                           <Link to={`${id}`} state={{from: location}}>\n                              {poster_path ? <FilmItemImg src={`${SEARCH_IMG_URL}/${poster_path}`} alt={title} /> : <DefaultImg src={DefaultPoster} alt=\"poster not available\"/>}\n                              <FilmItemTitle>{title} <span>({release_date.slice(0, 4)})</span></FilmItemTitle>\n                           </Link>\n                        </FilmItem>\n                     ))\n                  }\n               </FilmList>\n            </Wrapper>\n         </Section> \n        \n    )\n}\n\nMoviesPageTemplate.propTypes = {\n   films: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.string.isRequired,\n   })).isRequired,\n}","import { useEffect, useState } from \"react\"\nimport { SearchForm } from \"components/SearchForm/SearchForm\";\nimport { searchFilmsByName } from \"services/themoviedbApi\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { MoviesPageTemplate } from \"components/MoviesPageTemplate/MoviesPageTemplate\";\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Spinner } from \"components/Loader/Loader\";\nimport { Main } from \"components/Main/Main.styled\";\n\nexport const MoviesPage = () => {\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState(null);\n   const [searchParams, setSearchParams] = useSearchParams();\n   const [films, setFilms] = useState(null);\n\n   useEffect(() => {\n\n      const name = searchParams.get('query')\n      if(!name){\n         return;\n      }\n      setLoading(true);\n\n     const searchFilms = async () => {\n         try {\n            const response = await searchFilmsByName(name);\n            if (!response.results.length) {\n            toast.error('No result, please input a new search value!');\n            return;\n            }\n            const detectedFilms = response.results.map(({ id, title, poster_path, release_date })=> ({ id, title, poster_path, release_date }))\n            setFilms(detectedFilms);\n         } catch (error) {\n           setError(error.message);\n        } finally {\n           setLoading(false);\n        }\n        \n     } \n     searchFilms();    \n   },[searchParams]);\n\n   const onSubmit = value => {\n      if(!value){\n         toast.error('Plese input search value!');\n         return;\n      }\n      setSearchParams({query: value});\n   }\n   \n   return (\n      <Main>\n         <Toaster position=\"top-right\" toastOptions={{\n            style: {\n               background: '#e45b5b',\n               padding: '16px',\n               color: '#e9e9e9',\n            },\n         }}/>\n         <SearchForm onSubmit={onSubmit}/>\n         {loading && <Spinner color=\"#ec711f\"/>}\n         {error && <h2>{error}</h2>}\n         {films && \n         <MoviesPageTemplate films={films}/>}\n      </Main>\n         \n   )\n}","import axios from 'axios';\nimport { API_KEY, POPULAR_FILM_FETCH, SEARCH__MOVIE, FILM } from '../constance';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getPopularFilms = async () => {\n  const response = await axios.get(`${POPULAR_FILM_FETCH}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchFilmsByName = async name => {\n  const response = await axios.get(\n    `${SEARCH__MOVIE}?api_key=${API_KEY}&query=${name}`\n  );\n  return response.data;\n};\n\nexport const getFilmDetailsById = async id => {\n  const response = await axios.get(\n    `${FILM}/${id}?api_key=${API_KEY}&append_to_response=credits,reviews`\n  );\n  return response.data;\n};\n"],"names":["SpinnerContainer","styled","Spinner","BounceLoader","color","Main","SEARCH_IMG_URL","API_KEY","POPULAR_FILM_FETCH","SEARCH__MOVIE","FILM","Form","Input","SearchBtn","SearchForm","onSubmit","useState","searchValue","setSearchValue","event","preventDefault","normalizedSearchValue","toLowerCase","trim","type","placeholder","value","onChange","currentTarget","Section","FilmList","FilmItem","FilmItemImg","DefaultImg","FilmItemTitle","MoviesPageTemplate","films","location","useLocation","map","id","title","poster_path","release_date","to","state","from","src","alt","DefaultPoster","slice","MoviesPage","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","setFilms","useEffect","name","get","searchFilms","searchFilmsByName","response","results","length","toast","detectedFilms","message","position","toastOptions","style","background","padding","query","axios","getPopularFilms","data","getFilmDetailsById"],"sourceRoot":""}