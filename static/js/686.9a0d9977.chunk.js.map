{"version":3,"file":"static/js/686.9a0d9977.chunk.js","mappings":"oMAEaA,E,OAAmBC,GAAAA,IAAH,oG,SCChBC,EAAU,WACnB,OAAO,SAACF,EAAD,WACH,SAAC,EAAAG,aAAD,CAAcC,MAAM,gB,oECFfC,E,OAAOJ,GAAAA,KAAH,qG,sJCHV,IAAMK,EAAiB,kCACjBC,EAAU,mCACVC,EAAqB,sBACrBC,EAAgB,gBAChBC,EAAO,U,8LCFPC,EAAUV,EAAAA,GAAAA,QAAH,8FAKPW,EAAgBX,EAAAA,GAAAA,GAAH,2KAQbY,EAAWZ,EAAAA,GAAAA,GAAH,kUAeRa,EAAWb,EAAAA,GAAAA,GAAH,q1BAsCRc,EAAcd,EAAAA,GAAAA,IAAH,sFAMXe,EAAaf,EAAAA,GAAAA,IAAH,sFAMVgB,EAAgBhB,EAAAA,GAAAA,GAAH,8J,6BCzEbiB,EAAmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzBC,GAAWC,EAAAA,EAAAA,MACjB,OACI,SAACV,EAAD,WACI,UAACW,EAAA,EAAD,YACI,SAACV,EAAD,+BACA,SAACC,EAAD,UACCM,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACP,SAACZ,EAAD,WACI,UAAC,KAAD,CAAMa,GAAE,iBAAYH,GAAMI,MAAO,CAACC,KAAMT,GAAxC,UACKM,GAAc,SAACX,EAAD,CAAae,IAAG,UAAKxB,EAAAA,GAAL,YAAuBoB,GAAeK,IAAKN,KAAY,SAACT,EAAD,CAAYc,IAAKE,EAAeD,IAAI,0BAE1H,SAACd,EAAD,UAAgBQ,QAJTD,c,oBCTtBS,EAAW,WACrB,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOf,EAAP,KAAcoB,EAAd,KAiBA,OAhBAC,EAAAA,EAAAA,YAAU,WACTJ,GAAW,GACX,IAAMK,EAAQ,mCAAG,gHAEWC,EAAAA,EAAAA,MAFX,OAENC,EAFM,OAINC,EAAeD,EAASE,QAAQtB,KAAI,kBAA+B,CAACC,GAAhC,EAAEA,GAAkCC,MAApC,EAAMA,MAAqCC,YAA3C,EAAaA,gBACvDa,EAASK,GALG,gDAOZN,EAAS,KAAMQ,SAPH,yBASZV,GAAW,GATC,4EAAH,qDAYdK,MACE,KAEA,UAAC,IAAD,WACIJ,IAAS,wBAAKA,KACf,SAACnB,EAAD,CAAkBC,MAAOA,IACxBgB,IAAW,SAAC,IAAD,CAAS/B,MAAM,iB,+PC3BpC2C,IAAAA,SAAAA,QAAyB,+BAElB,IAAML,EAAe,mCAAG,oGACNK,IAAAA,IAAA,UAAavC,EAAAA,GAAb,oBAA2CD,EAAAA,KADrC,cACvBoC,EADuB,yBAEtBA,EAASK,MAFa,2CAAH,qDAKfC,EAAiB,mCAAG,WAAMC,GAAN,uFACRH,IAAAA,IAAA,UAClBtC,EAAAA,GADkB,oBACOF,EAAAA,GADP,kBACwB2C,IAFhB,cACzBP,EADyB,yBAIxBA,EAASK,MAJe,2CAAH,sDAOjBG,EAAkB,mCAAG,WAAM3B,GAAN,uFACTuB,IAAAA,IAAA,UAClBrC,EAAAA,GADkB,YACVc,EADU,oBACIjB,EAAAA,GADJ,wCADS,cAC1BoC,EAD0B,yBAIzBA,EAASK,MAJgB,2CAAH,uD","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Main/Main.styled.jsx","constance/constance.js","components/HomePageTemplate/HomePageTemplate.styled.jsx","components/HomePageTemplate/HomePageTemplate.jsx","pages/HomePage/HomePage.jsx","services/themoviedbApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SpinnerContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\n","import { BounceLoader } from \"react-spinners\";\nimport { SpinnerContainer } from \"./Loader.styled\";\n\nexport const Spinner = () => {\n    return <SpinnerContainer>\n        <BounceLoader color=\"#ec711f\"/>\n    </SpinnerContainer>\n}","import styled from 'styled-components';\n\n\nexport const Main = styled.main`\n  \n  min-height: 100vh;\n  background: linear-gradient(#4e0d0d, #b32626);\n`;","export const SEARCH_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nexport const API_KEY = 'acf3cca943ac5337a13eedff98e533f5';\nexport const POPULAR_FILM_FETCH = '/trending/movie/day';\nexport const SEARCH__MOVIE = '/search/movie';\nexport const FILM = '/movie';\nexport const FILM_CAST = '/credits';\nexport const FILM_REVIEWS = '/reviews';\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  text-align: center;\n  padding-top: 30px;\n  padding-bottom: 30px;\n`;\nexport const HomePageTitle = styled.h2`\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-weight: 500;\n    font-size: 24px;\n    margin-bottom: 30px;\n    color: #ec711f;\n`;\n\nexport const FilmList = styled.ul`\n    display: flex;\n    align-items: center;\n    @media screen and (max-width: 767px){\n        flex-direction: column;\n    }\n\n    @media screen and (min-width: 768px){\n        flex-wrap: wrap;\n        justify-content: center;\n        margin-top: -30px;\n        margin-left: -30px;\n    }\n`;\n\nexport const FilmItem = styled.li`\n    max-width: 240px;\n    border-radius: 10px;\n    overflow: overlay;\n    background-color: #ec711f;\n    transform: scale(1);\n    transition: transform 250ms ease;\n\n    :hover,\n    :focus {\n        transform: scale(1.1);\n    }\n\n    @media screen and (max-width: 767px){\n        :not(:last-child){\n            margin-bottom: 30px;\n        }\n    }\n    \n    @media screen and (min-width: 768px){\n        flex-basis: calc((100% - 60px) / 2);\n        margin-top: 30px;\n        margin-left: 30px;\n    }\n\n    @media screen and (min-width: 1024px){\n        flex-basis: calc((100% - 90px) / 3);\n        margin-top: 30px;\n        margin-left: 30px;\n    }\n\n    @media screen and (min-width: 1440px){\n        flex-basis: calc((100% - 120px) / 4);\n        margin-top: 30px;\n        margin-left: 30px;\n    }\n`;\n\nexport const FilmItemImg = styled.img`\n    width: 290px;\n    height: 320px;\n    object-fit: fill;\n`;\n\nexport const DefaultImg = styled.img`\n    width: 290px;\n    height: 320px;\n    object-fit: fill;\n`;\n\nexport const FilmItemTitle = styled.h3`\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 5px;\n    font-weight: 400;\n    line-height: 133%;\n\n    color: #fff;\n`;\n\n","import { Link, useLocation } from \"react-router-dom\";\nimport { SEARCH_IMG_URL } from \"constance\";\nimport { HomePageTitle, Section, FilmList, FilmItem, FilmItemImg, DefaultImg, FilmItemTitle } from \"./HomePageTemplate.styled\";\nimport { Wrapper } from \"components/Wrapper\";\nimport DefaultPoster from \"../../images/PosterNotAvailable.jpg\";\nimport PropTypes from \"prop-types\";\n\nexport const HomePageTemplate = ({ films }) => {\n    const location = useLocation();\n    return (\n        <Section>\n            <Wrapper>\n                <HomePageTitle>Trending today:</HomePageTitle>\n                <FilmList>\n                {films.map(({ id, title, poster_path })=> (\n                    <FilmItem key={id}>\n                        <Link to={`movies/${id}`} state={{from: location}}>\n                            {poster_path ? <FilmItemImg src={`${SEARCH_IMG_URL}/${poster_path}`} alt={title} /> : <DefaultImg src={DefaultPoster} alt=\"poster not available\"/>}\n                            \n                            <FilmItemTitle>{title}</FilmItemTitle>\n                        </Link>\n                    </FilmItem>\n                ))}\n                </FilmList>\n            </Wrapper>\n        </Section>\n        \n    )\n}\n\nHomePageTemplate.propTypes = {\n    films: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n        poster_path: PropTypes.string.isRequired,\n    }).isRequired).isRequired,\n}","import { getPopularFilms } from \"services/themoviedbApi\";\nimport { useState, useEffect } from \"react\";\nimport { HomePageTemplate } from \"components/HomePageTemplate/HomePageTemplate\";\nimport { Spinner } from \"components/Loader/Loader\";\nimport { Main } from \"components/Main/Main.styled\";\n\nexport const HomePage = () => {\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState(null);\n   const [films, setFilms] = useState([]);\n   useEffect(() => {\n    setLoading(true);  \n    const getFilms = async () => {\n      try {\n         const response = await getPopularFilms();\n\n         const popularFilms = response.results.map(({id, title, poster_path}) => ({id, title, poster_path}))\n         setFilms(popularFilms);\n      } catch (error) {\n         setError(error.message);\n      } finally {\n         setLoading(false);  \n      }\n    }\n    getFilms();\n   }, []);\n   return (\n      <Main> \n         {error && <h2>{error}</h2>}\n         <HomePageTemplate films={films}/>\n         {loading && <Spinner color=\"#ec711f\" />}\n      </Main>\n   )\n}","import axios from 'axios';\nimport { API_KEY, POPULAR_FILM_FETCH, SEARCH__MOVIE, FILM } from '../constance';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getPopularFilms = async () => {\n  const response = await axios.get(`${POPULAR_FILM_FETCH}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchFilmsByName = async name => {\n  const response = await axios.get(\n    `${SEARCH__MOVIE}?api_key=${API_KEY}&query=${name}`\n  );\n  return response.data;\n};\n\nexport const getFilmDetailsById = async id => {\n  const response = await axios.get(\n    `${FILM}/${id}?api_key=${API_KEY}&append_to_response=credits,reviews`\n  );\n  return response.data;\n};\n"],"names":["SpinnerContainer","styled","Spinner","BounceLoader","color","Main","SEARCH_IMG_URL","API_KEY","POPULAR_FILM_FETCH","SEARCH__MOVIE","FILM","Section","HomePageTitle","FilmList","FilmItem","FilmItemImg","DefaultImg","FilmItemTitle","HomePageTemplate","films","location","useLocation","Wrapper","map","id","title","poster_path","to","state","from","src","alt","DefaultPoster","HomePage","useState","loading","setLoading","error","setError","setFilms","useEffect","getFilms","getPopularFilms","response","popularFilms","results","message","axios","data","searchFilmsByName","name","getFilmDetailsById"],"sourceRoot":""}